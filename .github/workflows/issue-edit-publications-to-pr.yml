name: Edit publications data to PR

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  pull-requests: write

jobs:
  build-pr:
    if: contains(github.event.issue.labels.*.name, 'publications')
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Parse issue form
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || '';
            function extract(label){
              const re = new RegExp(`###\\s+${label}\\n([\\s\\S]*?)(?=\\n###|$)`, 'i');
              const m = body.match(re);
              return m ? m[1].trim() : '';
            }
            const out = {
              action: extract('Action').split('\n')[0].trim(),
              index: extract('Target index \(0-based\)').split('\n')[0].trim(),
              title: extract('Title'),
              authors: extract('Authors'),
              year: extract('Year').split('\n')[0].trim(),
              journal: extract('Journal'),
              url: extract('URL'),
              abstract: extract('Abstract')
            };
            core.setOutput('json', JSON.stringify(out));

      - name: Install PyYAML
        run: pip3 install pyyaml

      - name: Update _data/publications.yml
        run: |
          python3 - << 'PY'
  import yaml, json, sys
  from pathlib import Path
  data = json.loads('${{ steps.parse.outputs.json }}')
  path = Path('_data/publications.yml')
  items = []
  if path.exists():
      with path.open('r', encoding='utf-8') as f:
          items = yaml.safe_load(f) or []
  action = (data.get('action') or '').lower()
  def to_entry(d):
      e = {}
      for k in ['title','authors','year','journal','url','abstract']:
          v = d.get(k)
          if v is not None and str(v).strip() != '':
              e[k] = str(v).strip()
      return e
  if action == 'add':
      items.append(to_entry(data))
  elif action in ('update_by_index','delete_by_index'):
      try:
          idx = int(data.get('index'))
      except Exception:
          print('Invalid index', file=sys.stderr); sys.exit(1)
      if idx < 0 or idx >= len(items):
          print('Index out of range', file=sys.stderr); sys.exit(1)
      if action == 'delete_by_index':
          items.pop(idx)
      else:
          updated = items[idx]
          updated.update(to_entry(data))
          items[idx] = updated
  else:
      print('Invalid action', file=sys.stderr); sys.exit(1)
  with path.open('w', encoding='utf-8') as f:
      yaml.safe_dump(items, f, allow_unicode=True, sort_keys=False)
PY

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Edit publications data via issue #${{ github.event.issue.number }}"
          title: "Edit publications data"
          body: |
            Auto-generated from issue #${{ github.event.issue.number }}.
          branch: "content/publications-issue-${{ github.event.issue.number }}"
          delete-branch: true


